using Newtonsoft.Json;
using System;
using System.Linq;
using Qlik.Sense.Client.Visualizations;
using Qlik.Sense.Client;
using Qlik.Engine;
using Newtonsoft.Json.Linq;

// Connect to the Qlik Sense Desktop
var appName = "DeleteTest";
var location = Qlik.Engine.Location.FromUri(new Uri("ws://localhost:4848"));
location.AsDirectConnectionToPersonalEdition();

// Get the list of all apps
var appIdentifiers = location.GetAppIdentifiers();

// Find the app with the name you're looking for
var appIdentifier = appIdentifiers.FirstOrDefault(app => app.AppName == $"{appName}.qvf");

if (appIdentifier == null)
{
    Console.WriteLine($"Could not find app with name '{appName}'");
    return;
}

// Open the app
var app = location.App(appIdentifier.AppId);

// Print the app metadata
Console.WriteLine($"App ID: {appIdentifier.AppId}");
Console.WriteLine($"App Name: {appIdentifier.AppName}");

// Get all objects in the app
var allInfos = app.GetAllInfos();

// Filter the list to get only the tables
var tables = allInfos.Where(info => info.Type == "table").ToList();

var json = JsonConvert.SerializeObject(tables, Formatting.Indented);

// Print the JSON output
Console.WriteLine(json);

foreach (var table in tables)
{
    // Get the table object
    var tableObject = app.GetObject<Table>(table.Id);
    var tableLayout = JsonConvert.SerializeObject(tableObject.Layout, Formatting.Indented);
    JObject layout = JsonConvert.DeserializeObject<JObject>(tableLayout);

    string tableTitle = layout["title"].ToString();

    Console.WriteLine($"Table Id: {table.Id}");
    Console.WriteLine($"Table Title: {tableTitle}");

    // Get the table's data
    var pageWidth = tableObject.Layout.HyperCube.Size.cx;
    var pageHeight = 50;
    var totalHeight = tableObject.Layout.HyperCube.Size.cy;
    var numPages = (int)Math.Ceiling((double)totalHeight / pageHeight);
    var dimensionHeaders = tableObject.Layout.HyperCube.DimensionInfo.Select((dim, id) => new { Id = id, Header = dim.FallbackTitle }).ToList();
    var measureHeaders = tableObject.Layout.HyperCube.MeasureInfo.Select((measure, id) => new { Id = id + dimensionHeaders.Count, Header = measure.FallbackTitle }).ToList();
    var columnOrder = tableObject.Layout.HyperCube.ColumnOrder;
    var allHeaders = dimensionHeaders.Concat(measureHeaders).ToList();
    var orderedHeaders = columnOrder.Select(id => allHeaders.First(h => h.Id == id)).ToList();

    Console.WriteLine(string.Join(",", orderedHeaders.Select(h => h.Header)));

    for (int i = 0; i < numPages; i++)
    {
        var tableData = tableObject.GetHyperCubeData("/qHyperCubeDef", new List<NxPage> { new NxPage { Top = i * pageHeight, Left = 0, Width = pageWidth, Height = pageHeight } });

        // Iterate through the data and print it as CSV
        foreach (var page in tableData)
        {
            foreach (var row in page.Matrix)
            {
                Console.WriteLine(string.Join(",", row.Select(cell => cell.Text)));
            }
        }
    }
}
